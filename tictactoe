 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Tic-Tac-Toe</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            text-align: center;
            background: linear-gradient(to bottom, #e0f2ff, #ffffff);
            min-height: 100vh;
            margin: 0;
            padding: 20px;
        }
        h1 {
            color: #2563eb;
            font-size: 2.5em;
            margin-bottom: 20px;
        }
        #board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            gap: 10px;
            margin: 20px auto;
            justify-content: center;
        }
        .cell {
            width: 100px;
            height: 100px;
            background: white;
            border: 4px solid #2563eb;
            border-radius: 12px;
            font-size: 2.5em;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .cell:hover:not(.taken) {
            background-color: #f0f9ff;
        }
        .cell.taken {
            cursor: not-allowed;
        }
        .controls {
            margin: 20px 0;
        }
        select, button {
            padding: 10px 20px;
            font-size: 1em;
            border-radius: 8px;
            border: 2px solid #2563eb;
            margin: 0 10px;
            cursor: pointer;
        }
        button {
            background-color: #2563eb;
            color: white;
            border: none;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #1d4ed8;
        }
        #character-container {
            position: fixed;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%) translateY(100px);
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            gap: 15px;
            opacity: 0;
            transition: all 0.3s ease-out;
        }
        #character-container.show {
            transform: translateX(-50%) translateY(0);
            opacity: 1;
        }
        #character-emoji {
            font-size: 2.5em;
        }
        #character-message {
            font-size: 1.2em;
            font-weight: bold;
            color: #333;
        }
        .good-move { color: #059669; }
        .bad-move { color: #dc2626; }
        .neutral { color: #2563eb; }
    </style>
</head>
<body>
    <h1>Interactive Tic-Tac-Toe</h1>
    
    <div class="controls">
        <select id="mode" onchange="resetGame()">
            <option value="player">Two Players</option>
            <option value="ai">Play Against AI</option>
        </select>
        <button onclick="resetGame()">Restart Game</button>
    </div>
    
    <div id="board"></div>
    
    <div id="character-container">
        <div id="character-emoji">üéÆ</div>
        <div id="character-message">Let's play!</div>
    </div>

    <script>
        let board = ['', '', '', '', '', '', '', '', ''];
        let currentPlayer = 'X';
        let gameActive = true;
        const winningCombos = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],
            [0, 3, 6], [1, 4, 7], [2, 5, 8],
            [0, 4, 8], [2, 4, 6]
        ];

        function createBoard() {
            const boardElement = document.getElementById('board');
            boardElement.innerHTML = '';
            board.forEach((cell, index) => {
                const cellElement = document.createElement('div');
                cellElement.classList.add('cell');
                if (cell) cellElement.classList.add('taken');
                cellElement.textContent = cell;
                cellElement.addEventListener('click', () => makeMove(index));
                boardElement.appendChild(cellElement);
            });
        }

        function checkForWinningMove(testBoard, player) {
            for (let combo of winningCombos) {
                const [a, b, c] = combo;
                if (testBoard[a] === player && testBoard[b] === player && testBoard[c] === '') return c;
                if (testBoard[a] === player && testBoard[c] === player && testBoard[b] === '') return b;
                if (testBoard[b] === player && testBoard[c] === player && testBoard[a] === '') return a;
            }
            return null;
        }

        function isLosingMove(index) {
            // Create a test board with the proposed move
            const testBoard = [...board];
            testBoard[index] = currentPlayer;
            
            // Check if this move gives opponent a winning move
            const opponent = currentPlayer === 'X' ? 'O' : 'X';
            
            // Check each possible opponent move
            const emptySpots = testBoard.map((cell, idx) => cell === '' ? idx : null).filter(idx => idx !== null);
            
            for (let spot of emptySpots) {
                const futureBoard = [...testBoard];
                futureBoard[spot] = opponent;
                
                // Check if any winning combos are completed
                for (let combo of winningCombos) {
                    const [a, b, c] = combo;
                    if (futureBoard[a] === opponent && futureBoard[b] === opponent && futureBoard[c] === opponent) {
                        return true;
                    }
                }
            }
            return false;
        }

        function evaluateMove(index) {
            // First check if it's a losing move
            if (isLosingMove(index)) {
                return { message: "Oh no! That's a losing move! üò±", type: "bad" };
            }

            // Check if it's a winning move
            const testBoard = [...board];
            testBoard[index] = currentPlayer;
            if (checkWinnerForBoard(testBoard)) {
                return { message: "Winning move! üéØ", type: "good" };
            }

            // Check if it's a blocking move
            const opponent = currentPlayer === 'X' ? 'O' : 'X';
            const opponentWinningMove = checkForWinningMove(board, opponent);
            if (opponentWinningMove === index) {
                return { message: "Great blocking move! üõ°Ô∏è", type: "good" };
            }

            // Early game strategy
            if (board.filter(cell => cell !== '').length <= 3) {
                if (index === 4) return { message: "Good center control! üëç", type: "good" };
                if ([0, 2, 6, 8].includes(index)) return { message: "Nice corner strategy! ‚≠ê", type: "good" };
            }

            // Check if it's setting up a winning opportunity
            const isWinningSetup = winningCombos.some(combo => {
                if (combo.includes(index)) {
                    const otherSquares = combo.filter(i => i !== index);
                    return board[otherSquares[0]] === currentPlayer || board[otherSquares[1]] === currentPlayer;
                }
                return false;
            });
            if (isWinningSetup) return { message: "Strategic setup! üéØ", type: "good" };

            return { message: "Okay move! üëå", type: "neutral" };
        }

        function showCharacterMessage(message, type = 'neutral') {
            const container = document.getElementById('character-container');
            const emoji = document.getElementById('character-emoji');
            const messageElement = document.getElementById('character-message');
            
            messageElement.textContent = message;
            messageElement.className = '';
            messageElement.classList.add(type + '-move');
            
            switch(type) {
                case 'good':
                    emoji.textContent = 'üòä';
                    break;
                case 'bad':
                    emoji.textContent = 'üò±';
                    break;
                case 'win':
                    emoji.textContent = 'üéâ';
                    break;
                case 'draw':
                    emoji.textContent = 'ü§ù';
                    break;
                default:
                    emoji.textContent = 'üéÆ';
            }

            container.classList.add('show');
            setTimeout(() => container.classList.remove('show'), 2000);
        }

        function checkWinnerForBoard(testBoard) {
            for (let combo of winningCombos) {
                const [a, b, c] = combo;
                if (testBoard[a] && testBoard[a] === testBoard[b] && testBoard[a] === testBoard[c]) {
                    return testBoard[a];
                }
            }
            return null;
        }

        function makeMove(index) {
            if (!gameActive || board[index] !== '') return;

            board[index] = currentPlayer;
            const evaluation = evaluateMove(index);
            showCharacterMessage(evaluation.message, evaluation.type);

            const winner = checkWinnerForBoard(board);
            if (winner) {
                gameActive = false;
                showCharacterMessage(`${winner} wins! üéâ`, 'win');
                createBoard();
                return;
            }

            if (!board.includes('')) {
                gameActive = false;
                showCharacterMessage("It's a draw! ü§ù", 'draw');
                createBoard();
                return;
            }

            currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
            createBoard();

            if (document.getElementById('mode').value === 'ai' && currentPlayer === 'O') {
                setTimeout(makeAIMove, 500);
            }
        }

        function makeAIMove() {
            const availableMoves = board.map((cell, index) => cell === '' ? index : null).filter(index => index !== null);
            if (availableMoves.length > 0) {
                const randomIndex = availableMoves[Math.floor(Math.random() * availableMoves.length)];
                makeMove(randomIndex);
            }
        }

        function resetGame() {
            board = ['', '', '', '', '', '', '', '', ''];
            currentPlayer = 'X';
            gameActive = true;
            createBoard();
            showCharacterMessage("Let's start a new game! üéÆ", 'neutral');
        }

        // Initialize the game
        createBoard();
    </script>
</body>
</html>
